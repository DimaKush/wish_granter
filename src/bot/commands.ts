import { Telegraf } from 'telegraf';
import { Context } from '../types';
import { logger } from '../utils/config';
import { clearChatHistory } from '../utils/chat';

export function setupCommands(bot: Telegraf<Context>) {
  // Start command
  bot.command('start', async (ctx) => {
    const welcomeMessageRu = `üßû Wish Granter - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ñ–µ–ª–∞–Ω–∏–π

–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI-–¥–∏–∞–ª–æ–≥.

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –í—ã—è–≤–ª—è—é –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –±–µ—Å–µ–¥—É
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–∞—é –º–µ—á—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã  
‚Ä¢ –†–∞–∑–±–∏–≤–∞—é –±–æ–ª—å—à–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —à–∞–≥–∏
‚Ä¢ –ù–∞—Ö–æ–∂—É –∏—Å—Ç–∏–Ω–Ω—ã–µ –º–æ—Ç–∏–≤—ã

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∂–µ–ª–∞–Ω–∏—è—Ö
2. –û—Ç–≤–µ—á—É —É—Ç–æ—á–Ω—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
3. –ù–∞–π–¥–µ–º –∏—Å—Ç–∏–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ
4. –°–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`;

    const welcomeMessageEn = `üßû Wish Granter

I help discover and formulate true wishes through AI dialogue.

What I do:
‚Ä¢ Uncover real goals through conversation
‚Ä¢ Transform dreams into concrete plans
‚Ä¢ Break down big wishes into steps
‚Ä¢ Find true motivations

How it works:
1. Tell me about your wishes
2. I'll ask clarifying questions
3. We'll find your true wish
4. We'll create an achievement plan`;

    await ctx.reply(welcomeMessageRu);
    await ctx.reply(welcomeMessageEn);
  });

  // Reset chat command
  bot.command('reset', async (ctx) => {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    
    // Actually clear the chat history
    await clearChatHistory(userId);
    
    // Clear session data
    if (ctx.session) {
      ctx.session.chatHistory = [];
    }

    await ctx.reply('üîÑ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É! / Chat reset. You can start a new conversation!');
  });

  // Help command
  bot.command('help', async (ctx) => {
    const helpMessage = `ü§ñ Wish Granter - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ñ–µ–ª–∞–Ω–∏–π

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
‚Ä¢ /who - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∏—Ñ—Ä—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /who —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ https://github.com/DimaKush/wish_granter
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥!`;

    await ctx.reply(helpMessage);
  });

  // Get user ID command
  bot.command('myid', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      const username = ctx.from?.username;
      
      await ctx.reply(
        `Your Telegram ID: \`${userId}\`\n` +
        `Username: @${username || 'none'}\n\n`,
        { parse_mode: 'Markdown' }
      );
      
      logger.info(`User ${userId} (@${username}) requested their ID`);
    } catch (error) {
      logger.error('Error in /myid command:', error);
      await ctx.reply('Error getting your ID. Please try again.');
    }
  });

  // Who command to check runtime connections
  bot.command('who', async (ctx) => {
    try {
      const processAny = process as any;
      const connections = processAny._getActiveHandles ? processAny._getActiveHandles().length : 'N/A';
      const uptime = Math.floor(process.uptime());
      const memUsage = process.memoryUsage();
      
      const statusMessage = `üîí –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞:
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç–Ω–¥–ª–æ–≤: ${connections}
‚Ä¢ –ü–∞–º—è—Ç—å: ${Math.round(memUsage.rss / 1024 / 1024)}MB

Process Status:
‚Ä¢ Uptime: ${uptime}s
‚Ä¢ Active handles: ${connections}
‚Ä¢ Memory: ${Math.round(memUsage.rss / 1024 / 1024)}MB`;
      
      await ctx.reply(statusMessage);
      
      // Log security check
      logger.info(`Process status checked by user ${ctx.from?.id}: connections=${connections}, uptime=${uptime}, memory=${Math.round(memUsage.rss / 1024 / 1024)}MB`);
    } catch (error) {
      logger.error('Error in /who command:', error);
      await ctx.reply('‚ùå Error getting process status.');
    }
  });

  logger.info('Commands setup completed');
} 