import { Telegraf } from 'telegraf';
import { Context } from '../types';
import { logger } from '../utils/config';
import { handleAdminSendMessage, clearChatHistory } from '../utils/chat';

export function setupCommands(bot: Telegraf<Context>) {
  // Start command
  bot.command('start', async (ctx) => {
    const welcomeMessageRu = `üßû Wish Granter - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ñ–µ–ª–∞–Ω–∏–π

–ü–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI-–¥–∏–∞–ª–æ–≥.

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –í—ã—è–≤–ª—è—é –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –±–µ—Å–µ–¥—É
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–∞—é –º–µ—á—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã  
‚Ä¢ –†–∞–∑–±–∏–≤–∞—é –±–æ–ª—å—à–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —à–∞–≥–∏
‚Ä¢ –ù–∞—Ö–æ–∂—É –∏—Å—Ç–∏–Ω–Ω—ã–µ –º–æ—Ç–∏–≤—ã

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∂–µ–ª–∞–Ω–∏—è—Ö
2. –û—Ç–≤–µ—á—É —É—Ç–æ—á–Ω—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
3. –ù–∞–π–¥–µ–º –∏—Å—Ç–∏–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ
4. –°–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`;

    const welcomeMessageEn = `üßû Wish Granter

I help discover and formulate true wishes through AI dialogue.

What I do:
‚Ä¢ Uncover real goals through conversation
‚Ä¢ Transform dreams into concrete plans
‚Ä¢ Break down big wishes into steps
‚Ä¢ Find true motivations

How it works:
1. Tell me about your wishes
2. I'll ask clarifying questions
3. We'll find your true wish
4. We'll create an achievement plan`;

    await ctx.reply(welcomeMessageRu);
    await ctx.reply(welcomeMessageEn);
  });

  // Chat command 
  bot.command('chat', async (ctx) => {
    await ctx.reply('Hi! I\'m ready to chat. What would you like to talk about?');
  });

  // New chat command
  bot.command('new_chat', async (ctx) => {
    if (!ctx.from) return;
    
    const userId = ctx.from.id.toString();
    
    // Actually clear the chat history
    await clearChatHistory(userId);
    
    // Clear session data
    if (ctx.session) {
      ctx.session.chatHistory = [];
    }
  });

  // Help command
  bot.command('help', async (ctx) => {
    const helpMessage = `ü§ñ Wish Granter - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ñ–µ–ª–∞–Ω–∏–π

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ /chat - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI
‚Ä¢ /new_chat - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
‚Ä¢ /who - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∏—Ñ—Ä—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
‚Ä¢ –î–∞–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "üîÑ Memory Reboot"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /who —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ https://github.com/DimaKush/wish_granter
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥!`;

    await ctx.reply(helpMessage);
  });

  // Get user ID command
  bot.command('myid', async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      const username = ctx.from?.username;
      
      await ctx.reply(
        `Your Telegram ID: \`${userId}\`\n` +
        `Username: @${username || 'none'}\n\n`,
        { parse_mode: 'Markdown' }
      );
      
      logger.info(`User ${userId} (@${username}) requested their ID`);
    } catch (error) {
      logger.error('Error in /myid command:', error);
      await ctx.reply('Error getting your ID. Please try again.');
    }
  });

  // Admin send message command
  bot.command('send', async (ctx: Context) => {
    try {
      const adminId = ctx.from?.id?.toString();
      if (!adminId) {
        await ctx.reply('‚ùå Error: Unable to identify user.');
        return;
      }

      // Check if message exists and has text
      if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply('‚ùå Error: No text message found.');
        return;
      }

      await handleAdminSendMessage(adminId, ctx.message.text);
    } catch (error) {
      logger.error('Error in /send command:', error);
      await ctx.reply('‚ùå Error processing send command. Please try again.');
    }
  });


  // Who command to check runtime connections
  bot.command('who', async (ctx) => {
    const activeConnections = 0;
    const processConnected = process.connected;
    
    const statusMessage = `üîí –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${activeConnections}
‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ${processConnected ? '‚ö†Ô∏è –ï—Å—Ç—å' : '‚úÖ –ù–µ—Ç'}
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º: –¢–æ–ª—å–∫–æ Claude AI

${processConnected ? '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–Ω–µ—à–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É' : '‚úÖ –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'}

Security status:
‚Ä¢ Active connections: ${activeConnections}
‚Ä¢ External processes: ${processConnected ? '‚ö†Ô∏è Yes' : '‚úÖ No'}
‚Ä¢ Encryption: ‚úÖ Active
‚Ä¢ Message access: Claude AI only

${processConnected ? '‚ö†Ô∏è External process connection detected' : '‚úÖ No suspicious activity'}`;

    await ctx.reply(statusMessage);
    
    // Log security check
    logger.info(`Security status checked by user ${ctx.from?.id}: connections=${activeConnections}, processConnected=${processConnected}`);
  });

  logger.info('Commands setup completed');
} 